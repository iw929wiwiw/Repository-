repeat task.wait() until workspace:FindFirstChild("Plots")

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local allowedPlaceIds = {109983668079237}

if not table.find(allowedPlaceIds, game.PlaceId) then return end

-- üîπ Webhooks
local WebhookURL_Private10M = "https://discord.com/api/webhooks/1421918127293206538/xin93XV6kbq8Pa-LGDG3eu4Dy8HeAkeCFGFJSbXsCaRGdB_4YNA2wWzf7QaYpCsS5kcg"
local WebhookURL_2M = "https://discord.com/api/webhooks/1421202405051334686/C8QaQQAH7YcvAE47qAp6kjzwzNIFFX7QJXYwkO9JCWyHxtXdc_yaTADMc4u3KCZCzKWN"
local WebhookURL_5M = "https://discord.com/api/webhooks/1421205702348898376/TcLPuRmpHF7OEUjw7jFioJcMDVxKNxZPVgJkGUTJABUqNAokFFGrwIfv6TCIN0jWkTK5"
local WebhookURL_8M = "https://discord.com/api/webhooks/1421233891716366439/f8qmlckhs51cGfjitHpZxFWQ59JSrUj7y1S4_iUyBxlstipmcpgVIvVWb2OX0hKmt9CN"
local WebhookURL_10M = "https://discord.com/api/webhooks/1421205591321346249/dYuHMwuujSFQcJlzFjfev80mPKsXbGQ58os7K26uT3ShmVw9zDQN3uVUmGJTtTIDkXzV"

local placeId = game.PlaceId
local req = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

-- üè∑Ô∏è Get the actual game name
local success, productInfo = pcall(function()
	return MarketplaceService:GetProductInfo(placeId)
end)
local gameName = success and productInfo and productInfo.Name or "Unknown Game"

-- Track pets already sent (per webhook)
local sentPrivate10M, sentPets2M, sentPets5M, sentPets8M, sentPets10M = {}, {}, {}, {}, {}

-- ChilliHub link formatter
local function getChilliHubJoinLink(jobId)
	return string.format("https://chillihub1.github.io/chillihub-joiner/?placeId=%s&gameInstanceId=%s", tostring(placeId), tostring(jobId))
end

-- Webhook sender
local function sendWebhook(url, message)
	local data = {["content"] = message}
	local jsonData = HttpService:JSONEncode(data)
	if req then
		req({
			Url = url,
			Method = "POST",
			Headers = {["Content-Type"] = "application/json"},
			Body = jsonData
		})
	end
end

-- Convert "$2M/s" ‚Üí number
local function convertTextToNumber(text)
	if not text:find("/s") then return 0 end
	text = text:gsub("%$", ""):gsub("/s", ""):gsub("%s+", "")
	local multiplier = 1
	if text:upper():find("K$") then
		multiplier = 1e3
		text = text:gsub("[Kk]$", "")
	elseif text:upper():find("M$") then
		multiplier = 1e6
		text = text:gsub("[Mm]$", "")
	elseif text:upper():find("B$") then
		multiplier = 1e9
		text = text:gsub("[Bb]$", "")
	elseif text:upper():find("T$") then
		multiplier = 1e12
		text = text:gsub("[Tt]$", "")
	end
	local num = tonumber(text) or 0
	return num * multiplier
end

local function getPlayerCount()
	return #Players:GetPlayers()
end

local function cleanMutationText(rawText)
	if not rawText or rawText == "" then return "None" end
	if rawText:find("<stroke") or rawText:find("<font") then
		return "Yin Yang"
	end
	return rawText:gsub("<.->", "")
end

-- üîé Process TextLabel
local function processGenerationLabel(v)
	if not (v and v:IsA("TextLabel") and v.Name == "Generation") then return end

	local value = convertTextToNumber(v.Text)
	local playerCount = getPlayerCount()
	if playerCount < 6 or playerCount > 8 then return end

	local parent = v.Parent
	if not parent then return end

	local petId = parent:GetDebugId()
	local jobId = game.JobId

	local petFound = parent:FindFirstChild("DisplayName") and parent.DisplayName.Text or "Unknown"
	local moneyPerSec = v.Text
	local tag = parent:FindFirstChild("Rarity") and parent.Rarity.Text or "Unknown"

	local mutation = "None"
	local mutationTag = parent:FindFirstChild("Mutation")
	if mutationTag and mutationTag.Visible then
		mutation = cleanMutationText(mutationTag.Text)
	end

	local baseMessage = string.format([[

-- %s

---- Secret Is Found ‚úÖ ----

-- --- üì¢ Game: %s
-- --- üí° Model Name: "%s"
-- --- üè∑Ô∏è Tag: %s
-- --- üé® Mutation: %s
-- --- üí∏ Money/s: %s
-- --- üë• Player Count: %d/8

local player = game.Players:GetPlayers()[1]
game:GetService("TeleportService"):TeleportToPlaceInstance("%d", "%s", player)

]], getChilliHubJoinLink(jobId), gameName, petFound, tag, mutation, moneyPerSec, playerCount, placeId, jobId)

	-- ‚úÖ PRIVATE 10M+ check first
	if value >= 10000000 and not sentPrivate10M[petId] then
		sentPrivate10M[petId] = true
		sendWebhook(WebhookURL_Private10M, baseMessage)
		return -- üö´ stop here, don't send to normal webhooks
	end

	-- ‚úÖ Send to 2M+ webhook
	if value >= 2000000 and not sentPets2M[petId] then
		sentPets2M[petId] = true
		sendWebhook(WebhookURL_2M, baseMessage)
	end

	-- ‚úÖ Send to 5M+ webhook
	if value >= 5000000 and not sentPets5M[petId] then
		sentPets5M[petId] = true
		sendWebhook(WebhookURL_5M, baseMessage)
	end

	-- ‚úÖ Send to 8M+ webhook
	if value >= 8000000 and not sentPets8M[petId] then
		sentPets8M[petId] = true
		sendWebhook(WebhookURL_8M, baseMessage)
	end

	-- ‚úÖ Send to public 10M+ webhook (only if private didn't send)
	if value >= 10000000 and not sentPets10M[petId] then
		sentPets10M[petId] = true
		sendWebhook(WebhookURL_10M, baseMessage)
	end
end

-- üîÑ Scan loop
task.spawn(function()
	while task.wait(0.05) do
		for _, v in pairs(workspace:GetDescendants()) do
			processGenerationLabel(v)
		end
	end
end)

workspace.DescendantAdded:Connect(function(v)
	task.delay(0.05, function()
		processGenerationLabel(v)
	end)
end)
